{"version":3,"sources":["components/Header/Header.js","components/About/About.js","components/Item/Item.js","components/ItemList/ItemList.js","components/Search/Search.js","components/FilteredItemList/FilteredItemList.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","activeClassName","exact","to","About","src","process","width","height","alt","Item","props","name","image","price","completes","ItemList","filterText","this","filtered","items","sort","a","b","Name","forEach","i","Image","Price","Completes","toLowerCase","indexOf","push","key","React","Component","SearchBar","handleFilterTextChange","bind","handleInStockChange","e","onFilterTextChange","target","value","onInStockChange","checked","Provider","color","size","type","placeholder","onChange","FilteredItemList","state","setState","App","path","render","data","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ae58390b.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './Header.css';\n\nfunction Header() {\n    return (\n        <div className=\"Header\">\n            <header>\n                <h1>ACNH Fossils</h1>\n                <div className=\"Subtitle\">So you want to be a Dead Dino Doctor?</div>\n\n                 <div>\n                    <NavLink \n                        className=\"nav-link\"   \n                        activeClassName=\"nav-link-active\" \n                        exact \n                        to=\"/\">Fossils</NavLink>\n                    <NavLink \n                        className=\"nav-link\"   \n                        activeClassName=\"nav-link-active\" \n                        to=\"/about\">About</NavLink>\n                    </div>\n            </header>\n        </div>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport './About.css';\n\nfunction About() {\n    return (\n        <div className=\"About\">\n            <h1>Hoohoo! What's ACDB you ask?</h1>\n            <img src={`${process.env.PUBLIC_URL}/images/blathers.jpg`} width=\"50%\" height=\"50%\" alt=\"blathers\" />\n            <p>ACDB in its current evolution is but a mere list of fossils available in New Horizons.  But soon, it will be so much more.</p>\n        </div>\n    )\n}\n\nexport default About;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Item.css';\n\nfunction Item(props) {\n    const  { name, image, price, completes } = props\n    return (\n        <div className=\"itemCard\">\n            <div className=\"fossilHeader\">\n                <h3>{ name }</h3>\n                { completes && \n                    <small>Part of: { completes }</small>\n                }\n            </div>\n            <img src={`${process.env.PUBLIC_URL}/images/fossils/${ image }`} alt={`${ image }`} />\n            <div className=\"price\">{ price }</div>\n            <hr />\n        </div>\n    )\n}\n\nexport default Item;","import React from 'react';\nimport Item from '../Item/Item';\nimport './ItemList.css'\n\n// function ItemList() {\n//     const cards = data\n//     .sort((a,b) => (a.Name < b.Name) ? -1 : (a.Name > b.Name) ? 1 : 0)\n//     .map(( { Name, Image, Price, Completes }, i ) => {\n//         return (\n//             <Item \n//                 key = { i }\n//                 name = { Name }\n//                 image = { Image }\n//                 price = { Price }\n//                 completes = { Completes }\n//             />\n//         )\n//     });\n\n//     return (\n//         <div className = \"ItemList\">\n//             { cards }\n//         </div>\n//     );\n// }\n\n// export default ItemList;\n\n\nclass ItemList extends React.Component {\n    render() {\n        const filterText = this.props.filterText;\n        const filtered = [];\n\n        this.props.items\n            .sort((a,b) => (a.Name < b.Name) ? -1 : (a.Name > b.Name) ? 1 : 0)\n            .forEach(({ Name, Image, Price, Completes }, i) => {\n                if (Name.toLowerCase().indexOf(filterText) === -1) {\n                    return;\n                }\n                filtered.push(\n                    <Item \n                        key = { i }\n                        name = { Name }\n                        image = { Image }\n                        price = { Price }\n                        completes = { Completes }\n                    />\n                );\n            })\n\n    return (\n        <div className = \"ItemList\">\n            { filtered }\n        </div>\n    )};\n}\n\nexport default ItemList;","import React from 'react';\nimport { IconContext } from \"react-icons\";\nimport { FaSearch } from 'react-icons/fa';\nimport './Search.css';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    this.handleInStockChange = this.handleInStockChange.bind(this);\n  }\n  \n  handleFilterTextChange(e) {\n    this.props.onFilterTextChange(e.target.value);\n  }\n  \n  handleInStockChange(e) {\n    this.props.onInStockChange(e.target.checked);\n  }\n  \n  render() {\n    return (\n        <div className=\"search\">\n          <div>\n            <IconContext.Provider value={{ color:\"#FFFFFF\",size: \"1.75em\", className: \"global-class-name\" }}>\n              <FaSearch className=\"fa-search\"/>\n            </IconContext.Provider>\n          </div>\n            <input \n                type = \"text\"\n                placeholder=\"Search\"\n                value={ this.props.filterText } \n                onChange= { this.handleFilterTextChange } \n            />\n        </div>\n        );\n    }\n}\n\nexport default SearchBar;","import React from 'react';\nimport ItemList from '../ItemList/ItemList';\nimport SearchBar from '../Search/Search';\n\nclass FilteredItemList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filterText: ''\n        };\n\n        this.handleFilterTextChange = this.handleFilterTextChange.bind(this);\n    }\n    handleFilterTextChange(filterText) {\n        this.setState({\n            filterText: filterText\n    });\n  }\n\n  render() {\n      return (\n          <div>\n            <SearchBar\n                filterText = {this.state.filterText}\n                onFilterTextChange = {this.handleFilterTextChange}  />\n            <ItemList\n                items = { this.props.items }\n                filterText = { this.state.filterText }\n            />     \n          </div>\n      )\n  }\n}\n\nexport default FilteredItemList;","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport './App.css';\nimport Header from './components/Header/Header';\nimport About from './components/About/About';\nimport FilteredItemList from './components/FilteredItemList/FilteredItemList';\nimport data from './data/NH-fossils.json';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n        <Route exact \n          path = \"/\" \n          render = { (props) => <FilteredItemList {...props} items={data} />} \n        />\n        <Route path=\"/about\" component= {About} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}